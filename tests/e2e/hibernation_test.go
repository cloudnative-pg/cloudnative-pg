package e2e

import (
	"encoding/json"
	"fmt"

	corev1 "k8s.io/api/core/v1"
	"k8s.io/apimachinery/pkg/types"
	ctrlclient "sigs.k8s.io/controller-runtime/pkg/client"

	apiv1 "github.com/cloudnative-pg/cloudnative-pg/api/v1"
	"github.com/cloudnative-pg/cloudnative-pg/pkg/specs"
	"github.com/cloudnative-pg/cloudnative-pg/pkg/utils"
	"github.com/cloudnative-pg/cloudnative-pg/tests"
	testsUtils "github.com/cloudnative-pg/cloudnative-pg/tests/utils"

	. "github.com/onsi/ginkgo/v2"
	. "github.com/onsi/gomega"
)

var _ = Describe("Cluster Hibernation with plugin", func() {
	const (
		sampleFileClusterWithPGWalVolume    = fixturesDir + "/base/cluster-storage-class.yaml.template"
		sampleFileClusterWithOutPGWalVolume = fixturesDir + "/base/cluster-storage-class.yaml.template"
		level                               = tests.Medium
	)
	var namespace, sampleFile string
	BeforeEach(func() {
		if testLevelEnv.Depth < int(level) {
			Skip("Test depth is lower than the amount requested for this test")
		}
	})

	JustAfterEach(func() {
		if CurrentSpecReport().Failed() {
			env.DumpNamespaceObjects(namespace, "out/"+CurrentSpecReport().LeafNodeText+".log")
		}
	})

	AfterEach(func() {
		err := env.DeleteNamespace(namespace)
		Expect(err).ToNot(HaveOccurred())
	})

	Context("hibernate on", func() {
		When("cluster setup with PG-WAL volume", func() {
			BeforeEach(func() {
				sampleFile = sampleFileClusterWithPGWalVolume
			})
			It("hibernation process should work", func() {
				namespace = "hibernation-on-with-pg-wal"
				var beforeHibernationCurrentPrimary, pgWalPvcName, pgDataPvcName string
				var beforeHibernationPgWalPvcUID, beforeHibernationPgDataPvcUID types.UID
				var beforeHibernationClusterInfo *apiv1.Cluster
				var clusterManifest []byte
				var err error
				clusterName, err := env.GetResourceNameFromYAML(sampleFileClusterWithPGWalVolume)
				Expect(err).ToNot(HaveOccurred())
				// Create a cluster in a namespace we'll delete after the test
				err = env.CreateNamespace(namespace)
				Expect(err).ToNot(HaveOccurred())
				AssertCreateCluster(namespace, clusterName, sampleFileClusterWithPGWalVolume, env)

				By("collecting current primary details", func() {
					beforeHibernationClusterInfo, err = env.GetCluster(namespace, clusterName)
					Expect(err).ToNot(HaveOccurred())
					beforeHibernationCurrentPrimary = beforeHibernationClusterInfo.Status.CurrentPrimary
				})

				By("collecting pgWal pvc details of current primary", func() {
					pgWalPvcName = specs.GetPVCName(*beforeHibernationClusterInfo,
						beforeHibernationCurrentPrimary, utils.PVCRolePgWal)
					pvcInfo := corev1.PersistentVolumeClaim{}
					err = testsUtils.GetObject(env, ctrlclient.ObjectKey{Namespace: namespace, Name: pgWalPvcName}, &pvcInfo)
					Expect(err).ToNot(HaveOccurred())
					beforeHibernationPgWalPvcUID = pvcInfo.GetUID()
				})

				By("collecting pgData pvc details of current primary", func() {
					pgDataPvcName = specs.GetPVCName(*beforeHibernationClusterInfo,
						beforeHibernationCurrentPrimary, utils.PVCRolePgData)
					pvcInfo := corev1.PersistentVolumeClaim{}
					err = testsUtils.GetObject(env,
						ctrlclient.ObjectKey{Namespace: namespace, Name: pgDataPvcName},
						&pvcInfo)
					Expect(err).ToNot(HaveOccurred())
					beforeHibernationPgDataPvcUID = pvcInfo.GetUID()
					// collect expected cluster manifesto info
					clusterManifest, err = json.Marshal(&beforeHibernationClusterInfo)
					Expect(err).ToNot(HaveOccurred())
				})

				By("performing hibernation", func() {
					_, _, err := testsUtils.Run(fmt.Sprintf("kubectl cnpg hibernate on %v -n %v",
						clusterName, namespace))
					Expect(err).ToNot(HaveOccurred())
				})

				// After hibernation, it will destroy all the resources generated by the cluster,
				// except the PVCs that belong to the PostgreSQL primary instance.
				By("verifying all the resources generated by the clusters has been removed, "+
					"except primary instance PVCs", func() {
					cluster := &apiv1.Cluster{}
					err := env.Client.Get(env.Ctx,
						ctrlclient.ObjectKey{Namespace: namespace, Name: clusterName},
						cluster)
					Expect(err).To(HaveOccurred())
				})

				By("verifying primary pgWal pvc info", func() {
					pgWalPvcName = specs.GetPVCName(*beforeHibernationClusterInfo,
						beforeHibernationCurrentPrimary, utils.PVCRolePgWal)
					pvcInfo := corev1.PersistentVolumeClaim{}
					err = testsUtils.GetObject(env,
						ctrlclient.ObjectKey{Namespace: namespace, Name: pgWalPvcName},
						&pvcInfo)
					Expect(err).ToNot(HaveOccurred())
					// pgWalPvc should be same after hibernation
					Expect(beforeHibernationPgWalPvcUID).Should(BeEquivalentTo(pvcInfo.GetUID()))
					// pvc should be attached annotation with pgControlData and Cluster manifesto
					expectedAnnotationKeyPresent := []string{
						utils.HibernatePgControlDataAnnotationName,
						utils.HibernateClusterManifestAnnotationName,
					}
					testsUtils.PvcHasAnnotationKeys(pvcInfo, expectedAnnotationKeyPresent)
					expectedAnnotation := map[string]string{
						utils.HibernateClusterManifestAnnotationName: string(clusterManifest),
					}
					testsUtils.PvcHasAnnotation(pvcInfo, expectedAnnotation)
				})

				By("verifying primary pgData pvc info", func() {
					// pgData pvc verification
					pgDataPvcName = specs.GetPVCName(*beforeHibernationClusterInfo,
						beforeHibernationCurrentPrimary, utils.PVCRolePgData)
					pvcInfo := corev1.PersistentVolumeClaim{}
					err = testsUtils.GetObject(env,
						ctrlclient.ObjectKey{Namespace: namespace, Name: pgDataPvcName},
						&pvcInfo)
					Expect(err).ToNot(HaveOccurred())
					Expect(beforeHibernationPgDataPvcUID).Should(BeEquivalentTo(pvcInfo.GetUID()))
					// pvc should be attached annotation with pgControlData and Cluster manifesto
					expectedAnnotationKeyPresent := []string{
						utils.HibernatePgControlDataAnnotationName,
						utils.HibernateClusterManifestAnnotationName,
					}
					testsUtils.PvcHasAnnotationKeys(pvcInfo, expectedAnnotationKeyPresent)
					expectedAnnotation := map[string]string{
						utils.HibernateClusterManifestAnnotationName: string(clusterManifest),
					}
					testsUtils.PvcHasAnnotation(pvcInfo, expectedAnnotation)
				})
				By("verify PVC group", func() {
					// TODO PVC group
				})
			})
		})
		When("cluster setup without PG-WAL volume", func() {
			BeforeEach(func() {
				sampleFile = sampleFileClusterWithOutPGWalVolume
			})
			It("hibernation process should work", func() {
				fmt.Println(sampleFile)
				// TODO
			})
		})
		When("perform switchover activity", func() {
			It("hibernation process should work", func() {
				// TODO
			})
		})
	})
})
