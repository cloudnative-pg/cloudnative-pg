stages:
  - test
  - build
  - e2e
  - ocp

variables:
  CI_DEBUG_TRACE: "false"
  KUBEBUILDER_VERSION: "2.3.0"
  GOLANG_VERSION: "1.13"
  GOLANGCI_LINT_VERSION: "1.25.0"
  RUN_KIND_E2E: "true"
  RUN_GKE_E2E: "false"
  RUN_AKS_E2E: "false"
  RUN_EKS_E2E: "false"

before_script:
  - |
    if [ -n "${CI_COMMIT_TAG}" ]
    then
        export TARGET_IMAGE="${CI_REGISTRY_IMAGE}:${CI_COMMIT_TAG}"
    elif [ "${CI_COMMIT_REF_SLUG}" = master ]
    then
        export TARGET_IMAGE="${CI_REGISTRY_IMAGE}:latest"
    else
        export TARGET_IMAGE="${CI_REGISTRY_IMAGE}:${CI_COMMIT_REF_SLUG}"
    fi

build:
  stage: build
  image:
    name: gcr.io/kaniko-project/executor:debug
    entrypoint: [""]
  script:
    - echo "{\"auths\":{\"$CI_REGISTRY\":{\"username\":\"$CI_REGISTRY_USER\",\"password\":\"$CI_REGISTRY_PASSWORD\"}}}" > /kaniko/.docker/config.json
    - /kaniko/executor --context $CI_PROJECT_DIR --dockerfile $CI_PROJECT_DIR/Dockerfile --destination "${TARGET_IMAGE}"

test:
  stage: test
  image:
    name: golang:$GOLANG_VERSION
  script:
    - mkdir -p /usr/local/kubebuilder
    - curl -L https://go.kubebuilder.io/dl/$KUBEBUILDER_VERSION/$(go env GOOS)/$(go env GOARCH) | tar --strip-components=1 -xz -C /usr/local/kubebuilder
    - export PATH=$PATH:/usr/local/kubebuilder/bin
    - make test

lint:
  stage: test
  image:
    name: golang:$GOLANG_VERSION
  script:
    - curl -sSfL https://raw.githubusercontent.com/golangci/golangci-lint/master/install.sh | sh -s -- -b $(go env GOPATH)/bin v${GOLANGCI_LINT_VERSION}
    - make lint

kind_e2e:
  stage: e2e
  rules:
    - if: '$CI_PIPELINE_SOURCE == "schedule"'
    - if: '$RUN_KIND_E2E == "true"'
  image: docker:stable-git
  tags:
    - privileged
  services:
    - docker:stable-dind
  variables:
    # DinD configuration, see https://gitlab.com/gitlab-org/gitlab-runner/issues/4501
    #
    # When using dind, it's wise to use the overlayfs driver for
    # improved performance.
    DOCKER_DRIVER: overlay2
    # Specify to Docker where to create the certificates, Docker will
    # create them automatically on boot, and will create
    # `/certs/client` that will be shared between the service and
    # build container.
    DOCKER_TLS_CERTDIR: "/certs"
    # Display verbose e2e test output
    DEBUG: "true"
    DOCKER_SERVER: $CI_REGISTRY
    DOCKER_USERNAME: gitlab-ci-token
    DOCKER_PASSWORD: $CI_JOB_TOKEN
    KIND_VERSION: v0.9.0
    E2E_DEFAULT_STORAGE_CLASS: standard
  parallel:
    matrix:
      - POSTGRES_IMG: quay.io/2ndquadrant/postgres:13
        E2E_PRE_ROLLING_UPDATE_IMG: quay.io/2ndquadrant/postgres:13.0
        K8S_VERSION:
          - v1.19.1
          - v1.18.8
          - v1.17.11
          - v1.16.9
          - v1.15.12
      - POSTGRES_IMG: quay.io/2ndquadrant/postgres:12
        E2E_PRE_ROLLING_UPDATE_IMG: quay.io/2ndquadrant/postgres:12.4
        K8S_VERSION:
          - v1.19.1
      - POSTGRES_IMG: quay.io/2ndquadrant/postgres:11
        E2E_PRE_ROLLING_UPDATE_IMG: quay.io/2ndquadrant/postgres:11.9
        K8S_VERSION:
          - v1.19.1
      - POSTGRES_IMG: quay.io/2ndquadrant/postgres:10
        E2E_PRE_ROLLING_UPDATE_IMG: quay.io/2ndquadrant/postgres:10.14
        K8S_VERSION:
          - v1.19.1
  script:
    - apk add make bash curl go gettext
    - CONTROLLER_IMG="${TARGET_IMAGE}" BUILD_IMAGE=false hack/e2e/run-e2e-kind.sh

gke_e2e:
  stage: e2e
  rules:
    - if: '$CI_PIPELINE_SOURCE == "schedule"'
    - if: '$RUN_GKE_E2E == "true"'
  image:
    name: google/cloud-sdk:alpine
  variables:
    DOCKER_SERVER: $CI_REGISTRY
    DOCKER_USERNAME: gitlab-ci-token
    DOCKER_PASSWORD: $CI_JOB_TOKEN
    E2E_DEFAULT_STORAGE_CLASS: standard
    PROJECT: openshift-285518
    ZONE: europe-west3-a
  parallel:
    matrix:
      - POSTGRES_IMG: quay.io/2ndquadrant/postgres:13
        E2E_PRE_ROLLING_UPDATE_IMG: quay.io/2ndquadrant/postgres:13.0
        K8S_VERSION:
          - 1.17.9-gke.1504
          - 1.16.13-gke.401
          - 1.15.12-gke.20
  script:
    - export CONTROLLER_IMG="${TARGET_IMAGE}"
    - apk add go make gettext
    - export PATH="/root/go/bin:$PATH"
    # Install tools avoiding to pollute go.mod
    - |
      (
        GO_TMP_DIR=$(mktemp -d); cd "${GO_TMP_DIR}"
        go mod init tmp
        go get -u sigs.k8s.io/kubetest2/...@latest
        go get -u github.com/onsi/ginkgo/ginkgo
        cd -; rm -rf "${GO_TMP_DIR}"
      )
    - gcloud components install --quiet kubectl
    # We can't test a using kubectl version 1.15.x
    # need to raise the version to 1.16.x
    # see https://github.com/kubernetes/kubernetes/issues/80515
    - |
      if [ "${K8S_VERSION#1.15}" != "${K8S_VERSION}" ]; then
        cp -f $(which kubectl.1.16) $(which kubectl)
      fi
    - gcloud auth activate-service-account --key-file="${GCP_SERVICE_ACCOUNT}"
    - kubetest2 gke --version "${K8S_VERSION}" --ignore-gcp-ssh-key --project "${PROJECT}"  --cluster-name "cnp-test-$CI_PIPELINE_ID-$CI_NODE_INDEX" --zone "${ZONE}" --up --down -v 10 --test exec -- hack/e2e/run-e2e.sh
  after_script:
    # Remove stale Persistent Volumes remaining from the test run
    - |
      IDS=$(gcloud compute disks list --filter="name~cnp-test-${CI_PIPELINE_ID}-${CI_NODE_INDEX} zone~${ZONE}" --format="value(id)" --project="${PROJECT}")
      for ID in ${IDS}
      do
        gcloud compute disks delete --project="${PROJECT}" --zone "${ZONE}" --quiet "${ID}"
      done

eks_e2e:
  stage: e2e
  rules:
    - if: '$CI_PIPELINE_SOURCE == "schedule"'
    - if: '$RUN_EKS_E2E == "true"'
  image:
    name: amazon/aws-cli
    entrypoint: [""]
  variables:
    DOCKER_SERVER: $CI_REGISTRY
    DOCKER_USERNAME: gitlab-ci-token
    DOCKER_PASSWORD: $CI_JOB_TOKEN
    E2E_DEFAULT_STORAGE_CLASS: gp2
    REGION: eu-central-1
  parallel:
    matrix:
      - POSTGRES_IMG: quay.io/2ndquadrant/postgres:13
        E2E_PRE_ROLLING_UPDATE_IMG: quay.io/2ndquadrant/postgres:13.0
        K8S_VERSION:
          - "1.17"
          - "1.16"
          - "1.15"
  script:
    - export CONTROLLER_IMG="${TARGET_IMAGE}"
    - yum install -y golang make tar gzip git gettext
    - export PATH="/root/go/bin:${PATH}"
    - curl -sL "https://github.com/weaveworks/eksctl/releases/latest/download/eksctl_$(uname -s)_amd64.tar.gz" | tar xz -C /usr/local/bin
    # Get the same version of kubectl and k8s
    # but use version 1.16.x instead of 1.15.x
    # due to https://github.com/kubernetes/kubernetes/issues/80515
    - |
      KUBECTL_VERSION=$(git -c 'versionsort.suffix=-' ls-remote --refs --sort='version:refname' --tags https://github.com/kubernetes/kubernetes.git | cut --delimiter='/' --fields=3 | grep "^v${K8S_VERSION/1.15/1.16}.[0-9]\+$"|tail -n 1)
      curl -sL "https://storage.googleapis.com/kubernetes-release/release/${KUBECTL_VERSION}/bin/linux/amd64/kubectl" -o /usr/local/bin/kubectl
      chmod +x /usr/local/bin/kubectl
    # Install tools avoiding to pollute go.mod
    - |
      (
        GO_TMP_DIR=$(mktemp -d); cd "${GO_TMP_DIR}"
        go mod init tmp
        go get -u github.com/onsi/ginkgo/ginkgo
        cd -; rm -rf "${GO_TMP_DIR}"
      )
    - eksctl create cluster -n cnp-test-$CI_PIPELINE_ID-$CI_NODE_INDEX -r "${REGION}" --version "${K8S_VERSION}" --nodes 3
    - hack/e2e/run-e2e.sh
  after_script:
    - eksctl delete cluster -n cnp-test-$CI_PIPELINE_ID-$CI_NODE_INDEX -r "${REGION}" -w

aks_e2e:
  stage: e2e
  rules:
    - if: '$CI_PIPELINE_SOURCE == "schedule"'
    - if: '$RUN_AKS_E2E == "true"'
  image:
    name: mcr.microsoft.com/azure-cli:latest
  variables:
    DOCKER_SERVER: $CI_REGISTRY
    DOCKER_USERNAME: gitlab-ci-token
    DOCKER_PASSWORD: $CI_JOB_TOKEN
    E2E_DEFAULT_STORAGE_CLASS: default
  parallel:
    matrix:
      - POSTGRES_IMG: quay.io/2ndquadrant/postgres:13
        E2E_PRE_ROLLING_UPDATE_IMG: quay.io/2ndquadrant/postgres:13.0
        K8S_VERSION:
          - "1.18.8"
          - "1.17.11"
          - "1.16.15"
  script:
    - export CONTROLLER_IMG="${TARGET_IMAGE}"
    - apk add go gettext
    - export PATH="/root/go/bin:${PATH}"
    # Install tools avoiding to pollute go.mod
    - |
      (
        GO_TMP_DIR=$(mktemp -d); cd "${GO_TMP_DIR}"
        go mod init tmp
        go get -u github.com/onsi/ginkgo/ginkgo
        cd -; rm -rf "${GO_TMP_DIR}"
      )
    - az login --service-principal --username $AZURE_K8S_APP_ID --password $AZURE_K8S_PASSWORD --tenant $AZURE_K8S_TENANT_ID
    - az aks install-cli --client-version ${K8S_VERSION}
    - az aks create --resource-group cnp-test --name cnp-test-${CI_PIPELINE_ID}-${CI_NODE_INDEX} --node-count 3 -k ${K8S_VERSION} --generate-ssh-keys --service-principal $AZURE_K8S_APP_ID --client-secret $AZURE_K8S_PASSWORD
    - az aks get-credentials --resource-group cnp-test --name cnp-test-${CI_PIPELINE_ID}-${CI_NODE_INDEX}
    - hack/e2e/run-e2e.sh
  after_script:
    - az aks delete --resource-group cnp-test --name cnp-test-${CI_PIPELINE_ID}-${CI_NODE_INDEX} -y

trigger-ocp:
 stage: ocp
 trigger: k8s/cloud-native-postgresql-ocp-certified
 variables:
   UPSTREAM_COMMIT: $CI_COMMIT_SHA
   UPSTREAM_PIPELINE_ID: $CI_PIPELINE_ID
