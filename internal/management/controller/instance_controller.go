/*
This file is part of Cloud Native PostgreSQL.

Copyright (C) 2019-2020 2ndQuadrant Italia SRL. Exclusively licensed to 2ndQuadrant Limited.
*/

package controller

import (
	"encoding/base64"
	"fmt"
	"io/ioutil"
	"strings"
	"time"

	"github.com/pkg/errors"
	"github.com/prometheus/common/log"
	apierrors "k8s.io/apimachinery/pkg/api/errors"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/apis/meta/v1/unstructured"
	"k8s.io/apimachinery/pkg/runtime"
	"k8s.io/apimachinery/pkg/watch"
	"k8s.io/client-go/util/retry"

	apiv1alpha1 "gitlab.2ndquadrant.com/k8s/cloud-native-postgresql/api/v1alpha1"
	"gitlab.2ndquadrant.com/k8s/cloud-native-postgresql/internal/management/utils"
	"gitlab.2ndquadrant.com/k8s/cloud-native-postgresql/pkg/management/postgres"
	postgresSpec "gitlab.2ndquadrant.com/k8s/cloud-native-postgresql/pkg/postgres"
)

// Reconcile is the main reconciliation loop for the instance
func (r *InstanceReconciler) Reconcile(event *watch.Event) error {
	r.log.Info(
		"Reconciliation loop",
		"eventType", event.Type,
		"type", event.Object.GetObjectKind().GroupVersionKind())

	if event.Type == watch.Added {
		// The bootstrap status has been already
		// been applied when the instance started up.
		// No need to reconcile here.
		return nil
	}

	kind := event.Object.GetObjectKind().GroupVersionKind().Kind
	switch kind {
	case "Cluster":
		return r.reconcileCluster(event)
	case "ConfigMap":
		return r.reconcileConfigMap(event)
	case "Secret":
		return r.reconcileSecret(event)
	default:
		r.log.Info("unknown reconciliation target, skipped event",
			"kind", kind)
	}

	return nil
}

// reconcileCluster is called when something is changed at the
// cluster level
func (r *InstanceReconciler) reconcileCluster(event *watch.Event) error {
	object, err := objectToUnstructured(event.Object)
	if err != nil {
		return fmt.Errorf(
			"decoding runtime.Object data from watch: %w",
			err)
	}

	targetPrimary, err := utils.GetTargetPrimary(object)
	if err != nil {
		return err
	}

	if targetPrimary == r.instance.PodName {
		return r.reconcilePrimary(object)
	}

	return r.reconcileReplica()
}

// reconcileSecret is called when the PostgreSQL secrets are changes
func (r *InstanceReconciler) reconcileSecret(event *watch.Event) error {
	object, err := objectToUnstructured(event.Object)
	if err != nil {
		return fmt.Errorf(
			"decoding runtime.Object data from watch: %w",
			err)
	}

	name, err := utils.GetName(object)
	if err != nil {
		return fmt.Errorf("while reading secret name: %w", err)
	}

	switch {
	case strings.HasSuffix(name, apiv1alpha1.ServerSecretSuffix):
		err = r.refreshCertificateFilesFromObject(
			object,
			postgresSpec.ServerCertificateLocation,
			postgresSpec.ServerKeyLocation)
		if err != nil {
			return err
		}

	case strings.HasSuffix(name, apiv1alpha1.PostgresCertSecretSuffix):
		err = r.refreshCertificateFilesFromObject(
			object,
			postgresSpec.PostgresCertificateLocation,
			postgresSpec.PostgresKeyLocation)
		if err != nil {
			return err
		}

	case strings.HasSuffix(name, apiv1alpha1.CaSecretSuffix):
		err = r.refreshCAFromObject(object)
		if err != nil {
			return err
		}
	}

	r.log.Info("reloading the TLS crypto material")
	err = r.instance.Reload()
	if err != nil {
		return fmt.Errorf("while applying new certificates: %w", err)
	}

	return nil
}

// reconcileConfigMap is called then the ConfigMap generated by the
// cluster changes
func (r *InstanceReconciler) reconcileConfigMap(event *watch.Event) error {
	object, err := objectToUnstructured(event.Object)
	if err != nil {
		return fmt.Errorf(
			"decoding runtime.Object data from watch: %w",
			err)
	}

	err = r.refreshConfigurationFilesFromObject(object)
	if err != nil {
		return err
	}

	err = r.instance.Reload()
	if err != nil {
		return fmt.Errorf("while applying new configuration: %w", err)
	}

	// TODO: we already sighup the postmaster and
	// probably it has already reloaded the configuration
	// anyway there's no guarantee here that the signal
	// has been actually received and sent to the children.
	// What shall we do? Wait for a bit of time? Or inject
	// a configuration marker and wait for it to appear somewhere?

	status, err := r.instance.GetStatus()
	if err != nil {
		return fmt.Errorf("while applying new configuration: %w", err)
	}

	isPrimary, err := r.instance.IsPrimary()
	if err != nil {
		return fmt.Errorf("while applying new configuration: %w", err)
	}

	cluster, err := r.client.
		Resource(apiv1alpha1.ClusterGVK).
		Namespace(r.instance.Namespace).
		Get(r.instance.ClusterName, metav1.GetOptions{})
	if err != nil {
		return fmt.Errorf("while applying new configuration: %w", err)
	}

	instances, err := utils.GetInstances(cluster)
	if err != nil {
		return fmt.Errorf("while applying new configuration: %w", err)
	}

	if status.PendingRestart && (!isPrimary || instances == 1) {
		// We'll restart this instance because the configuration
		// change requires it (PendingRestart) and one of the
		// following condition applies:
		//
		// 1. this is the only instance composing the cluster,
		//    and this is the only way to apply a configuration
		//    change in this condition;
		//
		// 2. this is a replica server and we can restart it
		//    painlessly (the operator will require
		//    a switchover when all replicas are updated
		//    to refresh the configuration server to the primary
		//    server).

		// TODO: probably we need a restartMode flag in the cluster
		// configuration to disable or enable this auto-restart behavior
		r.log.Info("restarting this server to apply the new configuration")
		return r.instance.Shutdown()
	}

	return nil
}

// refreshConfigurationFilesFromObject receive an unstructured object representing
// a configmap and rewrite the file in the PGDATA.
// Important: this won't send a SIGHUP to the server
func (r *InstanceReconciler) refreshConfigurationFilesFromObject(object *unstructured.Unstructured) error {
	postgresConfiguration, err := utils.GetPostgreSQLConfiguration(object)
	if err != nil {
		return err
	}

	postgresHBA, err := utils.GetPostgreSQLHBA(object)
	if err != nil {
		return err
	}

	err = postgres.InstallPgDataFileContent(
		r.instance.PgData,
		postgresConfiguration,
		postgres.PostgresqlCustomConfigurationFile)
	if err != nil {
		return fmt.Errorf(
			"installing postgresql configuration: %w",
			err)
	}

	err = postgres.InstallPgDataFileContent(
		r.instance.PgData,
		postgresHBA,
		postgres.PostgresqlHBARulesFile)
	if err != nil {
		return fmt.Errorf(
			"installing postgresql HBA rules: %w",
			err)
	}

	return nil
}

// refreshConfigurationFilesFromObject receive an unstructured object representing
// a secret and rewrite the file corresponding to the server certificate
func (r *InstanceReconciler) refreshCertificateFilesFromObject(
	object *unstructured.Unstructured,
	certificateLocation string,
	privateKeyLocation string,
) error {
	certificate, err := utils.GetCertificate(object)
	if err != nil {
		return err
	}

	privateKey, err := utils.GetPrivateKey(object)
	if err != nil {
		return err
	}

	certificateBytes, err := base64.StdEncoding.DecodeString(certificate)
	if err != nil {
		return fmt.Errorf("while reading server certificate: %w", err)
	}

	privateKeyBytes, err := base64.StdEncoding.DecodeString(privateKey)
	if err != nil {
		return fmt.Errorf("while reading server private key: %w", err)
	}

	err = ioutil.WriteFile(certificateLocation, certificateBytes, 0600)
	if err != nil {
		return fmt.Errorf("while writing server certificate: %w", err)
	}

	err = ioutil.WriteFile(privateKeyLocation, privateKeyBytes, 0600)
	if err != nil {
		return fmt.Errorf("while writing server private key: %w", err)
	}

	return nil
}

// refreshConfigurationFilesFromObject receive an unstructured object representing
// a secret and rewrite the file corresponding to the server certificate
func (r *InstanceReconciler) refreshCAFromObject(object *unstructured.Unstructured) error {
	caCertificate, err := utils.GetCACertificate(object)
	if err != nil {
		return err
	}

	caCertificateBytes, err := base64.StdEncoding.DecodeString(caCertificate)
	if err != nil {
		return fmt.Errorf("while reading CA certificate: %w", err)
	}

	err = ioutil.WriteFile(postgresSpec.CACertificateLocation, caCertificateBytes, 0600)
	if err != nil {
		return fmt.Errorf("while writing server certificate: %w", err)
	}

	return nil
}

// Reconciler primary logic
func (r *InstanceReconciler) reconcilePrimary(cluster *unstructured.Unstructured) error {
	isPrimary, err := r.instance.IsPrimary()
	if err != nil {
		return err
	}

	if isPrimary {
		// All right
		return nil
	}

	r.log.Info("I'm the target primary, wait for the wal_receiver to be terminated")

	err = r.waitForWalReceiverDown()
	if err != nil {
		return err
	}

	r.log.Info("I'm the target primary, wait for every pending WAL record to be applied")

	err = r.waitForApply()

	r.log.Info("I'm the target primary, promoting my instance")

	// I must promote my instance here
	err = r.instance.PromoteAndWait()
	if err != nil {
		return errors.Wrap(err, "Error promoting instance")
	}

	// Now I'm the primary, need to inform the operator
	err = retry.RetryOnConflict(retry.DefaultRetry, func() error {
		r.log.Info("Setting myself as the current primary")
		err = utils.SetCurrentPrimary(cluster, r.instance.PodName)
		if err != nil {
			return err
		}

		_, err = r.client.
			Resource(apiv1alpha1.ClusterGVK).
			Namespace(r.instance.Namespace).
			UpdateStatus(cluster, metav1.UpdateOptions{})
		if err != nil {
			log.Error(err, "Error while setting current primary, retrying")
		}

		// If we have a conflict, let's replace the cluster info
		// with one more fresh
		if apierrors.IsConflict(err) {
			var errRefresh error
			cluster, errRefresh = r.client.
				Resource(apiv1alpha1.ClusterGVK).
				Namespace(r.instance.Namespace).
				Get(r.instance.ClusterName, metav1.GetOptions{})

			if errRefresh != nil {
				log.Error(errRefresh, "Error while refreshing cluster info")
			}
		}
		return err
	})

	return err
}

// Reconciler replica logic
func (r *InstanceReconciler) reconcileReplica() error {
	isPrimary, err := r.instance.IsPrimary()
	if err != nil {
		return err
	}

	if !isPrimary {
		// All right
		return nil
	}

	// I was the primary, but now I'm not the primary anymore.
	// Here we need to invoke a fast shutdown on the instance, and wait the the pod
	// restart to demote as a replica of the new primary
	return r.instance.Shutdown()
}

// objectToUnstructured convert a runtime Object into an unstructured one
func objectToUnstructured(object runtime.Object) (*unstructured.Unstructured, error) {
	data, err := runtime.DefaultUnstructuredConverter.ToUnstructured(object)
	if err != nil {
		return nil, err
	}

	return &unstructured.Unstructured{Object: data}, nil
}

// waitForApply wait for every transaction log to be applied
func (r *InstanceReconciler) waitForApply() error {
	// TODO: exponential backoff
	for {
		lag, err := r.instance.GetWALApplyLag()
		if err != nil {
			return err
		}

		if lag <= 0 {
			break
		}

		r.log.Info("Still need to apply transaction log info, waiting for 2 seconds",
			"lag", lag)
		time.Sleep(time.Second * 1)
	}

	return nil
}

// waitForWalReceiverDown wait until the wal receiver is down, and it's used
// to grab all the WAL files from a replica
func (r *InstanceReconciler) waitForWalReceiverDown() error {
	// TODO: exponential backoff
	for {
		status, err := r.instance.IsWALReceiverActive()
		if err != nil {
			return err
		}

		if !status {
			break
		}

		r.log.Info("WAL receiver is still active, waiting for 2 seconds")
		time.Sleep(time.Second * 1)
	}

	return nil
}
