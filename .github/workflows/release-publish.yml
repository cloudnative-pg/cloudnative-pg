# When a release tag is pushed, create and publish operator images on Quay and
# Docker. Then generate a release on GitHub.
name: release-publish

on:
  push:
    tags:
      - v*

env:
  GOLANG_VERSION: "1.17.x"

permissions:
  contents: write

jobs:
  buildx:
    name: Build containers
    runs-on: ubuntu-20.04
    steps:
      -
        name: Checkout
        uses: actions/checkout@v2.3.5
        with:
          # To identify the commit we need the history and all the tags.
          fetch-depth: 0
      -
        name: Install Go
        uses: actions/setup-go@v2.1.3
        with:
          go-version: ${{ env.GOLANG_VERSION }}
      -
        name: Build meta
        id: build-meta
        run: |
          images="quay.io/enterprisedb/cloud-native-postgresql-testing"
          images="${images},quay.io/enterprisedb/cloud-native-postgresql"
          images="${images},enterprisedb/cloud-native-postgresql"
          images="${images},edbcloud.azurecr.io/enterprisedb/cloud-native-postgresql"
          images="${images},upmdev.azurecr.io/enterprisedb/cloud-native-postgresql"
          commit_sha=${{ github.sha }}
          commit_date=$(git log -1 --pretty=format:'%ad' --date short "${commit_sha}")
          # use git describe to get the nearest tag and use that to build the version (e.g. 1.4.0+dev24 or 1.4.0)
          commit_version=$(git describe --tags --match 'v*' "${commit_sha}"| sed -e 's/^v//; s/-g[0-9a-f]\+$//; s/-\([0-9]\+\)$/+dev\1/')
          commit_short=$(git rev-parse --short "${commit_sha}")
          echo "::set-output name=images::${images}"
          echo "::set-output name=date::${commit_date}"
          echo "::set-output name=version::${commit_version}"
          echo "::set-output name=commit::${commit_short}"
      -
        name: Set GoReleaser environment
        run: |
          echo GOPATH=$(go env GOPATH) >> $GITHUB_ENV
          echo PWD=$(pwd) >> $GITHUB_ENV
      -
        name: Run GoReleaser
        uses: goreleaser/goreleaser-action@v2
        with:
          distribution: goreleaser
          version: latest
          args: build -f .goreleaser-multiarch.yml --skip-validate --rm-dist
        env:
          DATE: ${{ steps.build-meta.outputs.date }}
          COMMIT: ${{ steps.build-meta.outputs.commit }}
          VERSION: ${{ steps.build-meta.outputs.version }}
      -
        name: Docker meta
        id: docker-meta
        uses: docker/metadata-action@v3.3.0
        with:
          images: ${{ steps.build-meta.outputs.images }}
          tags: |
            type=semver,pattern={{version}}
      -
        name: Detect platforms
        id: docker-platforms
        run: |
          # Available architecture on UBI8 are: linux/amd64, linux/arm64, linux/ppc64le, linux/s390x
          # Keep in mind that adding more platforms (architectures) will increase the building
          # time even if we use the ghcache for the building process.
          platforms="linux/amd64,linux/arm64,linux/ppc64le,linux/s390x"
          echo "::set-output name=platforms::${platforms}"
      -
        name: Set up QEMU
        uses: docker/setup-qemu-action@v1.2.0
        with:
          image: tonistiigi/binfmt:qemu-v6.1.0
          platforms: ${{ steps.docker-platforms.outputs.platforms }}
      -
        name: Set up Docker Buildx
        id: buildx
        uses: docker/setup-buildx-action@v1.3.0
      -
        name: Login to quay.io
        uses: docker/login-action@v1.9.0
        with:
          registry: quay.io/enterprisedb
          username: ${{ secrets.QUAY_USERNAME }}
          password: ${{ secrets.QUAY_TOKEN }}
      -
        name: Login to Docker Hub
        uses: docker/login-action@v1.9.0
        with:
          username: ${{ secrets.DOCKER_HUB_USER }}
          password: ${{ secrets.DOCKER_HUB_SECRET }}
      -
        name: Login to Azure Dev Container Registry
        uses: docker/login-action@v1
        with:
          registry: upmdev.azurecr.io
          username: ${{ secrets.AZURECR_USER }}
          password: ${{ secrets.AZURECR_SECRET }}
      -
        name: Login to Azure Prod Container Registry
        uses: docker/login-action@v1.9.0
        with:
          registry: edbcloud.azurecr.io
          username: ${{ secrets.AZURECR_PROD_USER }}
          password: ${{ secrets.AZURECR_PROD_SECRET }}
      -
        name: Build and push
        uses: docker/build-push-action@v2.7.0
        with:
          platforms: ${{ steps.docker-platforms.outputs.platforms }}
          context: .
          push: true
          build-args: |
            VERSION=${{ steps.build-meta.outputs.version }}
          tags: ${{ steps.docker-meta.outputs.tags }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  release:
    runs-on: ubuntu-20.04
    needs:
      - buildx
    steps:
      -
        name: Checkout
        uses: actions/checkout@v2.3.5
      -
        name: Get tag
        run: |
          tag="${GITHUB_REF#refs/tags/v}"
          echo "TAG=${tag}" >> $GITHUB_ENV
      -
        name: Generate release notes
        run: |
          docker run --rm -v $(pwd):/src mist/submark \
            submark -O --h2 "Version ${{ env.TAG }}" \
            --out-file /src/release_notes.md \
            /src/docs/src/release_notes.md
      -
        name: Release
        uses: softprops/action-gh-release@v1
        with:
          body_path: release_notes.md
          draft: false
          name: Release ${{ env.TAG }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  release-plugin:
    runs-on: ubuntu-20.04
    steps:
      -
        name: Checkout
        uses: actions/checkout@v2.3.5
        with:
          fetch-depth: 0
      -
        name: Install Go
        uses: actions/setup-go@v2
        with:
          go-version: ${{ env.GOLANG_VERSION }}
      -
        name: Get tag
        run: |
          tag="${GITHUB_REF#refs/tags/v}"
          echo "TAG=${tag}" >> $GITHUB_ENV
      -
        name: Generate release notes
        run: |
          docker run --rm -v $(pwd):/src \
            -v /tmp:/tmp mist/submark \
            submark -O --h2 "Version ${{ env.TAG }}" \
            --out-file /tmp/release_notes.md \
            /src/docs/src/release_notes.md
      -
        name: Import GPG key
        id: import_gpg
        uses: crazy-max/ghaction-import-gpg@v4
        with:
          gpg_private_key: ${{ secrets.GPG_PRIVATE_KEY }}
          passphrase: ${{ secrets.GPG_PASSPHRASE }}
      -
        name: Release
        uses: softprops/action-gh-release@v1
        with:
          body_path: /tmp/release_notes.md
          draft: false
          name: Release ${{ env.TAG }}
          repository: EnterpriseDB/kubectl-cnp
          token: ${{ secrets.REPO_GHA_PAT }}
      -
        name: Set GoReleaser environment
        run: |
          echo GOPATH=$(go env GOPATH) >> $GITHUB_ENV
          echo PWD=$(pwd) >> $GITHUB_ENV
      -
        name: Run GoReleaser
        uses: goreleaser/goreleaser-action@v2
        with:
          distribution: goreleaser
          version: latest
          args: release --rm-dist
        env:
          GITHUB_TOKEN: ${{ secrets.REPO_GHA_PAT }}
          GPG_FINGERPRINT: ${{ steps.import_gpg.outputs.fingerprint }}
