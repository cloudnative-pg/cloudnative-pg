# When a release tag is pushed, create and publish operator images on GitHub
# Registry. Then generate a release on GitHub.
name: release-publish

on:
  push:
    tags:
      - v*

env:
  GOLANG_VERSION: "1.20.x"

permissions:
  contents: write
  packages: write

jobs:

  release:
    runs-on: ubuntu-22.04
    steps:
      -
        name: Checkout
        uses: actions/checkout@v3
      -
        name: Get tag
        run: |
          tag="${GITHUB_REF#refs/tags/v}"
          version="${tag#v}"
          file=$(echo ${version} | awk -F '[.]' '{print "release_notes/v"$1"."$2".md"}')
          echo "TAG=${tag}" >> $GITHUB_ENV
          echo "VERSION=${version}" >> $GITHUB_ENV
          echo "FILE=${file}" >> $GITHUB_ENV
      -
        name: Generate release notes
        run: |
          docker run --rm -v $(pwd):/src mist/submark \
            submark -O --h2 "Version ${{ env.TAG }}" \
            --out-file /src/release_notes.md \
            /src/docs/src/${{ env.FILE }}
      -
        name: Release
        uses: softprops/action-gh-release@v1
        with:
          body_path: release_notes.md
          draft: false
          name: Release ${{ env.TAG }}
          files: releases/cnpg-${{ env.VERSION }}.yaml
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  release-binaries:
    name: Build containers
    runs-on: ubuntu-22.04
    outputs:
      version: ${{ steps.build-meta.outputs.version }}
      digest: ${{ steps.build.outputs.digest }}
    steps:
      -
        name: Checkout
        uses: actions/checkout@v3
        with:
          # To identify the commit we need the history and all the tags.
          fetch-depth: 0
      -
        name: Install Go
        uses: actions/setup-go@v4
        with:
          go-version: ${{ env.GOLANG_VERSION }}
      -
        name: Build meta
        id: build-meta
        run: |
          images='ghcr.io/cloudnative-pg/cloudnative-pg'
          images="${images},ghcr.io/cloudnative-pg/cloudnative-pg-testing"
          commit_sha=${{ github.sha }}
          commit_date=$(git log -1 --pretty=format:'%ad' --date short "${commit_sha}")
          tag="${GITHUB_REF#refs/tags/v}"
          skip_krew="false"
          latest_release_branch=$(git branch -rl '*/release-*' | sort -r | head -n1 | sed -e 's/^.*\(release-.*\)/\1/')
          current_release_branch=$(echo "${tag}" | sed -e 's/\([0-9]\+.[0-9]\+\).*/release-\1/')
          if [[ "$latest_release_branch" != "$current_release_branch" ]]; then
            skip_krew="true"
          fi
          # use git describe to get the nearest tag and use that to build the version (e.g. 1.4.0+dev24 or 1.4.0)
          commit_version=$(git describe --tags --match 'v*' "${commit_sha}"| sed -e 's/^v//; s/-g[0-9a-f]\+$//; s/-\([0-9]\+\)$/+dev\1/')
          commit_short=$(git rev-parse --short "${commit_sha}")
          echo "IMAGES=${images}" >> $GITHUB_ENV
          echo "DATE=${commit_date}" >> $GITHUB_ENV
          echo "version=${commit_version}" >> $GITHUB_OUTPUT
          echo "COMMIT=${commit_short}" >> $GITHUB_ENV
          echo "SKIP_KREW=${skip_krew}" >> $GITHUB_ENV
      -
        name: Import GPG key
        id: import_gpg
        uses: crazy-max/ghaction-import-gpg@v5
        with:
          gpg_private_key: ${{ secrets.GPG_PRIVATE_KEY }}
          passphrase: ${{ secrets.GPG_PASSPHRASE }}
      -
        name: Set GoReleaser environment
        run: |
          echo GOPATH=$(go env GOPATH) >> $GITHUB_ENV
          echo PWD=$(pwd) >> $GITHUB_ENV
      -
        name: Run GoReleaser
        uses: goreleaser/goreleaser-action@v4
        with:
          distribution: goreleaser
          version: latest
          args: release --rm-dist
        env:
          DATE: ${{ env.DATE }}
          COMMIT: ${{ env.COMMIT }}
          VERSION: ${{ steps.build-meta.outputs.version }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          GPG_FINGERPRINT: ${{ steps.import_gpg.outputs.fingerprint }}
      -
        name: Publish Krew
        if: ${{ env.SKIP_KREW == 'false' }}
        uses: rajatjindal/krew-release-bot@v0.0.46
        with:
          krew_template_file: dist/cnpg.yaml
      -
        name: Docker meta
        id: docker-meta
        uses: docker/metadata-action@v4
        with:
          images: ${{ env.IMAGES }}
          tags: |
            type=semver,pattern={{version}}
      -
        name: Detect platforms
        run: |
          # Keep in mind that adding more platforms (architectures) will increase the building
          # time even if we use the ghcache for the building process.
          platforms="linux/amd64,linux/arm64"
          echo "PLATFORMS=${platforms}" >> $GITHUB_ENV
      -
        name: Set up QEMU
        uses: docker/setup-qemu-action@v2
        with:
          image: tonistiigi/binfmt:qemu-v6.1.0
          platforms: ${{ env.PLATFORMS }}
      -
        name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
      -
        name: Login to ghcr.io
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      -
        name: Build and push
        uses: docker/build-push-action@v4
        with:
          platforms: ${{ env.PLATFORMS }}
          context: .
          push: true
          build-args: |
            VERSION=${{ steps.build-meta.outputs.version }}
          tags: ${{ steps.docker-meta.outputs.tags }}
