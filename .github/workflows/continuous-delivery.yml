# This workflow executes the E2E Test Suite for a series of combinations that
# represent different execution environments
name: continuous-delivery
on:
  # Can be triggered by:
  #
  # A push from any branch
  push:
    branches:
      - 'main'
  # A pull request (from this repository or a forked one) which is labelled
  pull_request_target:
    types: [labeled]
  # Manually or triggered by another workflow
  workflow_dispatch:
    inputs:
      depth:
        description: 'Depth (push, pull_request_target, main, schedule)'
        required: true
        default: 'main'
      test_level:
        description: 'Test level (0-4)'
        required: false
      build_plugin:
        type: boolean
        required: false
        default: false
        description: Include kubectl-cnpg plugin building
  # scheduled
  schedule:
    - cron:  '0 1 * * *'

# set up environment variables to be used across all the jobs
env:
  GOLANG_VERSION: "1.18.x"
  GOLANGCI_LINT_VERSION: "v1.49"
  KUBEBUILDER_VERSION: "2.3.1"
  KIND_VERSION: "v0.11.0"
  ROOK_VERSION: "v1.6.8"
  CNPG_IMAGE_NAME: "ghcr.io/${{ github.repository }}-testing"

defaults:
  run:
    # default failure handling for shell scripts in 'run' steps
    shell: 'bash -Eeuo pipefail -x {0}'

jobs:
  # Detects if we should skip the workflow due to being duplicated. Exceptions:
  #   1. it's on 'main' branch
  #   2. it's triggered by events in the 'do_not_skip' list
  duplicate_runs:
    runs-on: ubuntu-20.04
    name: Skip duplicate runs
    continue-on-error: true
    outputs:
      should_skip: ${{ steps.skip_check.outputs.should_skip == 'true' && github.ref != 'refs/heads/main' }}
    steps:
      - id: skip_check
        uses: fkirc/skip-duplicate-actions@v5.2.0
        with:
          concurrent_skipping: 'same_content'
          skip_after_successful_duplicate: 'true'
          paths_ignore: '["README.md", "docs/**"]'
          do_not_skip: '["pull_request", "workflow_dispatch", "schedule"]'

  # Classify codebase changes along 5 different dimensions based on the files
  # changed in the commit/PR, and create 5 different filters which are used in
  # the following jobs to decide whether the step should be skipped.
  change-triage:
    name: Check changed files
    needs: duplicate_runs
    if: ${{ needs.duplicate_runs.outputs.should_skip != 'true' }}
    runs-on: ubuntu-20.04
    outputs:
      docs-changed: ${{ steps.filter.outputs.docs-changed }}
      operator-changed: ${{ steps.filter.outputs.operator-changed }}
      test-changed: ${{ steps.filter.outputs.test-changed }}
      shell-script-changed: ${{ steps.filter.outputs.shell-script-changed }}
      go-code-changed: ${{ steps.filter.outputs.go-code-changed }}
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Check for changes
        uses: dorny/paths-filter@v2.10.2
        id: filter
        # Remember to add new folders in the operator-changed filter if needed
        with:
          base: ${{ (github.event_name == 'schedule') && 'main' || '' }}
          filters: |
            docs-changed:
              - '**/*.md'
              - 'docs/**'
              - '.wordlist-en-custom.txt'
            operator-changed:
              - 'api/**'
              - 'cmd/**'
              - 'config/**'
              - 'controllers/**'
              - 'internal/**'
              - 'licenses/**'
              - 'pkg/**'
              - '.github/workflows/continuous-delivery.yml'
              - '.goreleaser.yml'
              - 'Dockerfile'
              - 'Makefile'
              - 'go.mod'
              - 'go.sum'
            test-changed:
              - 'tests/**'
              - 'hack/**'
            shell-script-changed:
              - '**/*.sh'
            go-code-changed:
              - '**/*.go'
              - '.golangci.yml'

  golangci:
    name: Run linters
    needs:
      - duplicate_runs
      - change-triage
    # Run Go linter only if Go code has changed
    if: |
      needs.duplicate_runs.outputs.should_skip != 'true' &&
      needs.change-triage.outputs.go-code-changed == 'true'
    runs-on: ubuntu-20.04
    steps:
      -
        name: Checkout code
        uses: actions/checkout@v3
        with:
          ref: ${{ github.event.pull_request.head.sha }}
      -
        name: Install Go
        uses: actions/setup-go@v3
        with:
          go-version: ${{ env.GOLANG_VERSION }}
      -
        name: Run golangci-lint
        uses: golangci/golangci-lint-action@v3
        with:
          version: ${{ env.GOLANGCI_LINT_VERSION }}
          args: --timeout 4m

  shellcheck:
    name: Run shellcheck linter
    needs:
      - duplicate_runs
      - change-triage
    # Run shellcheck linter only if shell code has changed
    if: |
      needs.duplicate_runs.outputs.should_skip != 'true' &&
      needs.change-triage.outputs.shell-script-changed == 'true'
    runs-on: ubuntu-20.04
    env:
      SHELLCHECK_OPTS: -a -S style
    steps:
      -
        uses: actions/checkout@v3
      -
        name: Run ShellCheck
        uses: ludeeus/action-shellcheck@1.1.0

  tests:
    name: Run unit tests
    needs:
      - duplicate_runs
      - change-triage
    # Run unit tests only if the operator or the Go codebase have changed
    # AND
    # EITHER The slash command ('/test' or '/ready-to-test') is issued in the comment of the PR which is labeled with
    #        'ready to test :elephant:'
    # OR     it's on main branch
    if: |
      needs.duplicate_runs.outputs.should_skip != 'true' &&
      (
        needs.change-triage.outputs.operator-changed == 'true' ||
        needs.change-triage.outputs.go-code-changed == 'true'
      ) &&
      (
        github.event.client_payload.slash_command != null ||
        github.event_name == 'workflow_dispatch' ||
        (
           github.event_name == 'pull_request_target' &&
           github.event.action == 'labeled' &&
           contains(github.event.pull_request.labels.*.name, 'ready to test :elephant:')
        ) ||
        github.head_ref == 'main'
      )
    runs-on: ubuntu-20.04
    strategy:
      matrix:
        # The Unit test is performed per multiple supported k8s versions (each job for each k8s version) as below:
        k8s-version:
          - 1.21.x
          - 1.22.x
          - 1.23.x
          - 1.24.x
          - 1.25.x
    steps:
      -
        name: Checkout code
        uses: actions/checkout@v3
        with:
          ref: ${{ github.event.pull_request.head.sha }}
      -
        name: Install Go
        uses: actions/setup-go@v3
        with:
          go-version: ${{ env.GOLANG_VERSION }}
      -
        # Cache Go modules on GitHub runners to be reused across jobs
        # See to: https://docs.github.com/en/actions/using-workflows/caching-dependencies-to-speed-up-workflows
        name: Cache Go modules
        uses: actions/cache@v3
        with:
          path: |
            ~/go/pkg/mod
            ~/.cache/go-build
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-
      -
        name: Run unit tests
        env:
          ENVTEST_K8S_VERSION: ${{ matrix.k8s-version }}
        run: |
          make test
      -
        name: Coverage Summary
        if: matrix.k8s-version == '1.25.x'
        run: |
          go tool cover -func=cover.out -o coverage.out
      -
        name: Publish unit test summary
        if: matrix.k8s-version == '1.25.x'
        run: |
          echo "Unit test coverage: $(tail -n 1 coverage.out | awk '{print $3}')" >> $GITHUB_STEP_SUMMARY
  apidoc:
    name: Verify API doc is up to date
    needs:
      - duplicate_runs
      - change-triage
    # Run make apidoc if Go code or docs have changed
    if: |
      needs.duplicate_runs.outputs.should_skip != 'true' &&
      (
        needs.change-triage.outputs.go-code-changed == 'true' ||
        needs.change-triage.outputs.docs-changed == 'true'
      )
    runs-on: ubuntu-20.04
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Install Go
        uses: actions/setup-go@v3
        with:
          go-version: ${{ env.GOLANG_VERSION }}

      - name: Run make apidoc
        run: |
          make apidoc

      - name: Verify apidoc changes
        run: |
          apidoc_file_path='docs/src/api_reference.md'
          if git status --porcelain $apidoc_file_path | grep '^ M'; then
            echo "The API documentation doesn't reflect the current API. Please run make apidoc."
            exit 1
          fi

  crd:
    name: Verify CRD is up to date
    needs:
      - duplicate_runs
      - change-triage
    # Run make manifests if Go code have changed
    if: ${{ needs.duplicate_runs.outputs.should_skip != 'true' && needs.change-triage.outputs.go-code-changed == 'true' }}
    runs-on: ubuntu-20.04
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Install Go
        uses: actions/setup-go@v3
        with:
          go-version: ${{ env.GOLANG_VERSION }}

      - name: Run make manifests
        run: |
          make manifests

      - name: Check CRD manifests are up to date
        run: |
          crd_path='config/crd'
          if git status --porcelain $crd_path | grep '^ M'; then
            echo "The CRD manifests do not reflect the current API. Please run make manifests."
            exit 1
          fi

  buildx:
    name: Build containers
    needs:
      - golangci
      - shellcheck
      - tests
      - apidoc
      - crd
      - duplicate_runs
      - change-triage
    # Build containers:
    #   if there have been any code changes OR it is a scheduled execution
    #   AND
    #   none of the preceding jobs failed
    if: |
      (
        github.event_name == 'schedule' ||
        needs.duplicate_runs.outputs.should_skip != 'true' &&
        (
          needs.change-triage.outputs.operator-changed == 'true' ||
          needs.change-triage.outputs.test-changed == 'true' ||
          needs.change-triage.outputs.shell-script-changed == 'true' ||
          needs.change-triage.outputs.go-code-changed == 'true'
        )
      ) &&
      always() &&
      (needs.golangci.result == 'success' || needs.golangci.result == 'skipped') &&
      (needs.shellcheck.result == 'success' || needs.shellcheck.result == 'skipped') &&
      (needs.tests.result == 'success' || needs.tests.result == 'skipped') &&
      (needs.apidoc.result == 'success' || needs.apidoc.result == 'skipped') &&
      (needs.crd.result == 'success' || needs.crd.result == 'skipped')
    runs-on: ubuntu-20.04
    permissions:
      contents: read
      packages: write
    outputs:
      image: ${{ steps.image-meta.outputs.image }}
      # 'branch_name' is used in 'GetMostRecentReleaseTag' in the Go code
      branch_name: ${{ steps.build-meta.outputs.branch_name }}

    steps:
      -
        name: Checkout
        uses: actions/checkout@v3
        with:
          # To identify the commit we need the history and all the tags.
          fetch-depth: 0
          ref: ${{ github.event.pull_request.head.sha }}
      -
        name: Install Go
        uses: actions/setup-go@v3
        with:
          go-version: ${{ env.GOLANG_VERSION }}
      -
        name: Cache Go modules
        uses: actions/cache@v3
        with:
          path: |
            ~/go/pkg/mod
            ~/.cache/go-build
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-
      -
        name: Build meta
        id: build-meta
        run: |
          images='${{ env.CNPG_IMAGE_NAME }}'
          tags=''
          labels=''
          commit_sha=${{ github.event.pull_request.head.sha || github.sha }}
          commit_date=$(git log -1 --pretty=format:'%ad' --date short "${commit_sha}" || : )
          # use git describe to get the nearest tag and use that to build the version (e.g. 1.4.0+dev24 or 1.4.0)
          commit_version=$(git describe --tags --match 'v*' "${commit_sha}"| sed -e 's/^v//; s/-g[0-9a-f]\+$//; s/-\([0-9]\+\)$/+dev\1/')
          # shortened commit sha
          commit_short=$(git rev-parse --short "${commit_sha}")
          commit_message=$(git show -s --format=%B "${commit_sha}")
          # get git user and email
          author_name=$(git show -s --format='%an' "${commit_sha}")
          author_email=$(git show -s --format='%ae' "${commit_sha}")
          # extract branch name
          if [ ${{ github.event_name }} != 'pull_request' ] && [ ${{ github.event_name }} != 'pull_request_target' ]
          then
            echo "::set-output name=branch_name::${GITHUB_REF#refs/heads/}"
          else
            echo "::set-output name=branch_name::${GITHUB_HEAD_REF}"
          fi

          echo "::set-output name=images::${images}"
          echo "::set-output name=tags::${tags}"
          echo "::set-output name=labels::${labels}"
          echo "::set-output name=date::${commit_date}"
          echo "::set-output name=version::${commit_version}"
          echo "::set-output name=commit::${commit_short}"
          echo "::set-output name=commit_sha::${commit_sha}"
          echo "::set-output name=commit_msg::${commit_message}"
          echo "::set-output name=author_name::${author_name}"
          echo "::set-output name=author_email::${author_email}"
      -
        name: Set GoReleaser environment
        run: |
          echo GOPATH=$(go env GOPATH) >> $GITHUB_ENV
          echo PWD=$(pwd) >> $GITHUB_ENV
      -
        name: Run GoReleaser to build kubectl-cnpg plugin
        uses: goreleaser/goreleaser-action@v3
        if: |
          github.event_name == 'schedule' || github.event.inputs.build_plugin == 'true'
        with:
          distribution: goreleaser
          version: latest
          args: build --skip-validate --rm-dist --id kubectl-cnpg
        env:
          DATE: ${{ steps.build-meta.outputs.date }}
          COMMIT: ${{ steps.build-meta.outputs.commit }}
          VERSION: ${{ steps.build-meta.outputs.version }}
      # Send Slack notification once build including plugin kubectl-cnpg fails, we only report the scheduled run to avoid message overflow
      -
        name: Slack Notification
        uses: rtCamp/action-slack-notify@v2
        if: |
          failure() && github.event_name == 'schedule'
        env:
          SLACK_COLOR: ${{ job.status }}
          SLACK_ICON: https://avatars.githubusercontent.com/u/85171364?size=48
          SLACK_USERNAME: cnpg-bot
          SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}
          SLACK_MESSAGE: Building plugin `kubectl-cnpg` failed!
      -
        name: Run GoReleaser
        uses: goreleaser/goreleaser-action@v3
        with:
          distribution: goreleaser
          version: latest
          args: build --skip-validate --rm-dist --id manager
        env:
          DATE: ${{ steps.build-meta.outputs.date }}
          COMMIT: ${{ steps.build-meta.outputs.commit }}
          VERSION: ${{ steps.build-meta.outputs.version }}
      -
        name: Docker meta
        id: docker-meta
        uses: docker/metadata-action@v4
        with:
          images: ${{ steps.build-meta.outputs.images }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
      -
        name: Detect platforms
        id: docker-platforms
        run: |
          # Keep in mind that adding more platforms (architectures) will increase the building
          # time even if we use the ghcache for the building process.
          platforms="linux/amd64,linux/arm64,linux/arm/v7"
          echo "::set-output name=platforms::${platforms}"
      -
        name: Set up QEMU
        uses: docker/setup-qemu-action@v2
        with:
          image: tonistiigi/binfmt:qemu-v6.1.0
          platforms: ${{ steps.docker-platforms.outputs.platforms }}
      -
        name: Set up Docker Buildx
        id: buildx
        uses: docker/setup-buildx-action@v2
      -
        name: Login to ghcr.io
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      -
        name: Build and push
        uses: docker/build-push-action@v3.1.1
        with:
          platforms: ${{ steps.docker-platforms.outputs.platforms }}
          context: .
          push: true
          build-args: |
            VERSION=${{ steps.build-meta.outputs.version }}
          tags: ${{ steps.docker-meta.outputs.tags }}
          labels: ${{ steps.build-meta.outputs.labels }}
          secrets: GIT_AUTH_TOKEN=${{ secrets.GITHUB_TOKEN }}
      -
        name: Image Meta
        id: image-meta
        env:
          TAGS: ${{ steps.docker-meta.outputs.tags }}
        run: |
          # If there is more than one tag, take the first one
          # TAGS could be separated by newlines or commas
          image=$(sed -n '1{s/,.*//; p}' <<< "$TAGS")
          echo "::set-output name=image::${image}"
      -
        name: Generate manifest for operator deployment
        id: generate-manifest
        run: |
          make generate-manifest
      -
        name: Upload the operator manifest as artifact in workflow
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: operator-manifest.yaml
          path: dist/operator-manifest.yaml
          retention-days: 7
      -
        name: Replicate the artifact or not (to cloudnative-pg/artifacts repo)
        id: replicate-or-not
        run: |
          branch_name=${{ steps.build-meta.outputs.branch_name }}
          # TODO after review/testing, the `|| ${branch_name} == 'dev/771'` should be removed
          if [[ ${branch_name} == 'main' || ${branch_name} =~ 'release/' || ${branch_name} == 'dev/771' ]]; then
            echo "::set-output name=replicate::true"
          else
            echo "::set-output name=replicate::false"
          fi
      -
        name: Checkout artifact
        uses: actions/checkout@v3
        if: ${{ steps.replicate-or-not.outputs.replicate == 'true'}}
        with:
          repository: cloudnative-pg/artifacts
          token: ${{ secrets.REPO_GHA_PAT }}
          path: work
          fetch-depth: 0
      -
        name: Configure git user
        if: ${{ steps.replicate-or-not.outputs.replicate == 'true'}}
        working-directory: work
        run: |
          git config user.email "${{ steps.build-meta.outputs.author_email }}"
          git config user.name "${{ steps.build-meta.outputs.author_name }}"
      -
        name: Switch to or create the right branch
        if: ${{ steps.replicate-or-not.outputs.replicate == 'true'}}
        working-directory: work
        run: |
          git switch -C ${{ steps.build-meta.outputs.branch_name }}
      -
        name: Replicate the manifest and commit
        if: ${{ steps.replicate-or-not.outputs.replicate == 'true'}}
        working-directory: work
        run: |
          mkdir -p manifests
          cp ../dist/operator-manifest.yaml manifests/
          git add .
          git commit -m "${{ steps.build-meta.outputs.commit_msg }}" -m "https://github.com/cloudnative-pg/cloudnative-pg/commit/${{ steps.build-meta.outputs.commit_sha }}"
      -
        name: Push changes
        if: ${{ steps.replicate-or-not.outputs.replicate == 'true'}}
        uses: ad-m/github-push-action@v0.6.0
        with:
          github_token: ${{ secrets.REPO_GHA_PAT }}
          repository: cloudnative-pg/artifacts
          directory: work
          branch: ${{ steps.build-meta.outputs.branch_name }}
          force: true

  generate-jobs:
    name: Generate jobs for E2E tests
    needs:
      - buildx
      - duplicate_runs
    # We try to avoid running the E2E Test Suite in general, to reduce load on
    # GitHub resources. We should run the tests always: on main and release
    # branches, when triggered by dependabot, when a PR is first opened, or when
    # a PR from a forked repo is labeled
    if: |
      needs.duplicate_runs.outputs.should_skip != 'true' &&
      always() &&
      needs.buildx.result == 'success' &&
      ( github.event_name == 'workflow_dispatch' ||
        github.head_ref == 'main' ||
        github.ref_name == 'main' ||
        startsWith(github.head_ref, 'release-') ||
        startsWith(github.ref_name, 'release-') ||
        startsWith(github.head_ref, 'dependabot/') ||
        startsWith(github.ref_name, 'dependabot/') ||
        (github.event_name == 'pull_request_target' &&  github.event.action == 'labeled')
       )
    runs-on: ubuntu-20.04
    outputs:
      image: ${{ needs.buildx.outputs.image }}
      localMatrix: ${{ steps.generate-jobs.outputs.localMatrix }}
      localEnabled: ${{ steps.generate-jobs.outputs.localEnabled }}
    steps:
      -
        name: Checkout code
        uses: actions/checkout@v3
      -
        id: generate-jobs
        # Generates the jobs that will become different matrix branches,
        # according to the event, or to the "depth" parameter if manually set
        name: Generate Jobs
        shell: bash
        run: |
          python .github/e2e-matrix-generator.py \
            -m '${{ github.event.inputs.depth || github.event_name }}'

  evaluate-test-level:
    # Evaluates the level/depth at which to execute an E2E Test Suite run.
    # E2E Tests with a level higher than this will be skipped.
    name: Evaluate test level
    needs:
      - generate-jobs
    if: |
      needs.duplicate_runs.outputs.should_skip != 'true' &&
      always() &&
      needs.generate-jobs.result == 'success'
    runs-on: ubuntu-20.04
    outputs:
      testLevel: ${{ steps.evaluate-test-level.outputs.testLevel }}
    steps:
      - name: evaluate test level
        id: evaluate-test-level
        run: |
          declare -A events
          events=([push]=0 [pull_request_target]=2 [main]=3 [schedule]=4)
          test_level_from_input="${{ github.event.inputs.test_level }}"
          if [ -n "${test_level_from_input}" ]
          then
            echo "::set-output name=testLevel::${test_level_from_input}"
            exit 0
          fi
          test_level_generated="${{ github.event.inputs.depth || github.event_name }}"
          if [ -n "${test_level_generated}" ]
          then
            echo "::set-output name=testLevel::${events[${test_level_generated}]}"
          fi

  e2e-local:
    name: Run E2E on local executors
    if: |
      needs.generate-jobs.outputs.localEnabled == 'true' &&
      needs.duplicate_runs.outputs.should_skip != 'true' &&
      always() &&
      needs.generate-jobs.result == 'success' &&
      needs.evaluate-test-level.result == 'success'
    needs:
      - buildx
      - generate-jobs
      - duplicate_runs
      - evaluate-test-level
    strategy:
      fail-fast: false
      matrix: ${{ fromJSON(needs.generate-jobs.outputs.localMatrix) }}
    runs-on: ubuntu-20.04
    env:
      # 'TEST_DEPTH' determines which E2E test cases will be run.
      # i.e. tests that have a level setting higher than TEST_DEPTH are skipped
      TEST_DEPTH: ${{ needs.evaluate-test-level.outputs.testLevel }}
      K8S_VERSION: "${{ matrix.k8s_version }}"
      POSTGRES_VERSION: ${{ matrix.postgres_version }}
      MATRIX: ${{ matrix.id }}
      POSTGRES_IMG: "${{ matrix.postgres_img }}"
      # The version of operator to upgrade FROM, in the rolling upgrade E2E test
      E2E_PRE_ROLLING_UPDATE_IMG: "${{ matrix.postgres_pre_img }}"
      BRANCH_NAME:  ${{ needs.buildx.outputs.branch_name }}

      DOCKER_SERVER: ghcr.io
      DOCKER_USERNAME: ${{ github.actor }}
      DOCKER_PASSWORD: ${{ secrets.GITHUB_TOKEN }}

      DEBUG: "true"
      BUILD_IMAGE: "false"
      CONTROLLER_IMG: ${{ needs.generate-jobs.outputs.image }}
      E2E_DEFAULT_STORAGE_CLASS: standard
      LOG_DIR: ${{ github.workspace }}/kind-logs/
      DOCKER_REGISTRY_MIRROR: https://mirror.gcr.io
    steps:
      -
        name: Cleanup Disk
        uses: curoky/cleanup-disk-action@v2.0
      -
        name: Cleanup docker cache
        run: |
          echo "-------------Disk info before cleanup----------------"
          df -h
          echo "-----------------------------------------------------"
          docker system prune -a -f
          echo "-------------Disk info after cleanup----------------"
          df -h
          echo "-----------------------------------------------------"
      -
        name: Checkout code
        uses: actions/checkout@v3
      -
        name: Install Go
        uses: actions/setup-go@v3
        with:
          go-version: ${{ env.GOLANG_VERSION }}
      -
        name: Cache Go modules
        uses: actions/cache@v3
        with:
          path: |
            ~/go/pkg/mod
            ~/.cache/go-build
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-
      -
        # 'Retry' preparing the E2E test ENV
        name: Prepare the environment
        uses: nick-fields/retry@v2
        with:
          timeout_seconds: 120
          max_attempts: 3
          on_retry_command: |
            # Clear-ups before retries
            rm -rf /usr/local/bin/kind /usr/local/bin/kubectl
          command: |
            sudo apt-get update
            sudo apt-get install -y gettext-base
            sudo hack/setup-cluster.sh prepare /usr/local/bin
      -
        name: Run Kind End-to-End tests
        run:
          make e2e-test-kind
      -
        # Summarize the failed E2E test cases if there are any
        name: Report failed E2E tests
        if: failure()
        run: |
          set +x
          chmod +x .github/report-failed-test.sh
          ./.github/report-failed-test.sh
      -
        # Create an individual artifact for each E2E test, which will be used to
        # generate E2E test summary in the follow-up job 'summarize-e2e-tests'
        name: Create individual artifact for each E2E test
        if: always()
        run: |
          set +x
          echo '{"runner": "local", "postgres": "${{env.POSTGRES_VERSION}}", "kubernetes": "${{env.K8S_VERSION}}", "runid": ${{ github.run_id }}, "id": "${{ env.MATRIX }}", "repo": "${{github.repository}}", "branch": "${{github.head_ref}}", "refname": "${{github.ref_name}}" }'
          python .github/generate-test-artifacts.py \
            -o testartifacts-${{ env.MATRIX }} \
            -f tests/e2e/out/report.json \
            -m '{"runner": "local", "postgres": "${{env.POSTGRES_VERSION}}", "kubernetes": "${{env.K8S_VERSION}}", "runid": ${{ github.run_id }}, "id": "${{ env.MATRIX }}", "repo": "${{github.repository}}", "branch": "${{github.head_ref}}", "refname": "${{github.ref_name}}" }'
          if [ -f tests/e2e/out/upgrade_report.json ]; then
            python .github/generate-test-artifacts.py \
              -o testartifacts-${{ env.MATRIX }} \
              -f tests/e2e/out/upgrade_report.json \
              -m '{"runner": "local", "postgres": "${{env.POSTGRES_VERSION}}", "kubernetes": "${{env.K8S_VERSION}}", "runid": ${{ github.run_id }}, "id": "${{ env.MATRIX }}", "repo": "${{github.repository}}", "branch": "${{github.head_ref}}", "refname": "${{github.ref_name}}" }'
          fi
      -
        name: Archive test artifacts
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: testartifacts-local
          path: testartifacts-${{ env.MATRIX }}/
          retention-days: 7
      -
        name: Cleanup test artifacts
        if: always()
        run:
          rm -rf testartifacts-${{ env.MATRIX }}/
      -
        name: Cleanup ginkgo JSON report
        # Delete report.json after the analysis. File should always exist.
        # Delete upgrade_report.json. It may not exist depending on test level.
        if: always()
        run: |
          if [ -f tests/e2e/out/upgrade_report.json ]; then
            rm tests/e2e/out/upgrade_report.json
          fi
          rm tests/e2e/out/report.json

      -
        # Archive logs for failed test cases if there are any
        name: Archive Kind logs
        if: failure()
        uses: actions/upload-artifact@v3
        with:
          name: kind-logs-${{ matrix.id }}
          path: kind-logs/
          retention-days: 7
      -
        name: Archive e2e failure contexts
        if: failure()
        uses: actions/upload-artifact@v3
        with:
          name: test-failure-contexts-${{ matrix.id }}
          path: |
            tests/*/out/
          retention-days: 7
          if-no-files-found: ignore

  # Summarize E2E test results, display in the GitHub 'summary' view
  summarize-e2e-tests:
    name: E2E test suite
    needs:
      - duplicate_runs
      - evaluate-test-level
      - e2e-local
    if: always() &&
      needs.duplicate_runs.outputs.should_skip != 'true' &&
      needs.evaluate-test-level.result == 'success'
    runs-on: ubuntu-20.04
    steps:
      - uses: actions/checkout@v3

      - name: Create a directory for the artifacts
        run: mkdir test-artifacts

      - name: Download all artifacts to the directory
        uses: actions/download-artifact@v3
        with:
          path: test-artifacts

      - name: Flatten all artifacts onto directory
        # The download-artifact action, since we did not give it a name,
        # downloads all artifacts and creates a new folder for each.
        # In this step we bring all the JSONs to a single folder
        run: mv test-artifacts/*/*.json test-artifacts

      - name: Display the structure of the artifact folder
        run: ls -R test-artifacts

      - name: Install Summarize dependencies
        run: |
          pip install prettytable

      - name: Compute the E2E test summary
        run: |
          python .github/summarize_test_results.py --dir test-artifacts >> $GITHUB_STEP_SUMMARY

      - name: Delete the downloaded files
        run: rm -rf test-artifacts

  # Adds the 'ok-to-merge' label to workflows that have run successfully and
  # have adequate test and matrix coverage.
  # This label is a prerequisite to be able to merge a PR.
  # Also see to 'require-labels.yml'
  ok-to-merge:
    name: Label the PR as "ok to merge"
    needs:
      - duplicate_runs
      - evaluate-test-level
      - e2e-local
    if: |
      !failure() && !cancelled() &&
      needs.duplicate_runs.outputs.should_skip != 'true' &&
      github.ref != 'refs/heads/main' &&
      github.event_name == 'workflow_dispatch' &&
      ( github.event.inputs.depth == 'main' || github.event.inputs.depth == 'schedule' ) &&
      needs.evaluate-test-level.outputs.testLevel >= 4
    runs-on: ubuntu-20.04
    steps:
      -
        name: Checkout code
        uses: actions/checkout@v3
      -
        name: Check preconditions
        id: get_pr_number_and_labels
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          pr_number=$(gh pr view --json number -q .number 2>/dev/null || : )
          echo "::set-output name=pr_number::${pr_number}"
          ok_label=$((gh pr view --json labels -q ".labels.[].name" 2>/dev/null || :) | grep "ok to merge")
          echo "::set-output name=ok_label::${ok_label}"
      -
        name: Label the PR as "ok to merge"
        if: |
          steps.get_pr_number_and_labels.outputs.pr_number != '' &&
          steps.get_pr_number_and_labels.outputs.ok_label == ''
        uses: actions-ecosystem/action-add-labels@v1.1.3
        with:
          github_token: ${{ secrets.REPO_GHA_PAT }}
          number: ${{ steps.get_pr_number_and_labels.outputs.pr_number }}
          labels: "ok to merge :ok_hand:"

  # Remove the 'ok-to-merge' label if the E2E tests or previous steps failed
  unlabel-ok-to-merge:
    name: Remove the "ok to merge" label from the PR
    needs:
      - duplicate_runs
      - evaluate-test-level
      - e2e-local
    if: |
      failure() &&
      needs.duplicate_runs.outputs.should_skip != 'true' &&
      github.ref != 'refs/heads/main'
    runs-on: ubuntu-20.04
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      - name: Check preconditions
        id: get_pr_number_and_labels
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          pr_number=$(gh pr view --json number -q .number 2>/dev/null || : )
          echo "::set-output name=pr_number::${pr_number}"
          ok_label=$((gh pr view --json labels -q ".labels.[].name" 2>/dev/null || :) | grep "ok to merge")
          echo "::set-output name=ok_label::${ok_label}"
      - name: Remove "ok to merge" label from PR
        if: |
          steps.get_pr_number_and_labels.outputs.pr_number != '' &&
          steps.get_pr_number_and_labels.outputs.ok_label != ''
        uses: actions-ecosystem/action-remove-labels@v1.3.0
        with:
          github_token: ${{ secrets.REPO_GHA_PAT }}
          number: ${{ steps.get_pr_number_and_labels.outputs.pr_number }}
          labels: "ok to merge :ok_hand:"
