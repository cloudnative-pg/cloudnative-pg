name: build

on:
  push:
  workflow_dispatch:
    inputs:
      depth:
        description: 'Depth (push, pull_request, main, schedule)'
        required: true
        default: 'main'
      limit:
        description: 'Limit to the specified engines list (local, eks, aks)'
        required: false
  schedule:
    - cron:  '0 1 * * *'

env:
  GOLANG_VERSION: "1.14.x"
  GOLANGCI_LINT_VERSION: "v1.39"
  KUBEBUILDER_VERSION: "2.3.1"

defaults:
  run:
    shell: 'bash -Eeuo pipefail -x {0}'

jobs:

  golangci:
    name: Run linters
    runs-on: ubuntu-20.04
    steps:
      -
        name: Checkout code
        uses: actions/checkout@v2
      -
        name: Run golangci-lint
        uses: golangci/golangci-lint-action@v2.5.1
        with:
          version: ${{ env.GOLANGCI_LINT_VERSION }}
          args: --timeout 4m

  shellcheck:
    name: Run shellcheck linter
    runs-on: ubuntu-20.04
    env:
        SHELLCHECK_OPTS: -a -S style
    steps:
    -
      uses: actions/checkout@v2
    -
      name: Run ShellCheck
      uses: ludeeus/action-shellcheck@1.0.0

  tests:
    name: Run unit tests
    runs-on: ubuntu-20.04
    steps:
      -
        name: Checkout code
        uses: actions/checkout@v2
      -
        name: Install Go
        uses: actions/setup-go@v2
        with:
          go-version: ${{ env.GOLANG_VERSION }}
      # Install kubebuilder that is a requirement to run tests
      -
        name: Install Kubebuilder
        run: |
          mkdir -p /tmp/kubebuilder
          curl -sSL https://go.kubebuilder.io/dl/${{ env.KUBEBUILDER_VERSION }}/$(go env GOOS)/$(go env GOARCH) | tar --strip-components=1 -xz -C /tmp/kubebuilder
          sudo mv /tmp/kubebuilder /usr/local/
      -
        name: Run unit tests
        run:
          make test

  apidoc:
    name: Verify API doc is up to date
    runs-on: ubuntu-20.04
    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Run make apidoc
      run: |
        make apidoc

    - name: Verify apidoc changes
      run: |
        apidoc_file_path='docs/src/api_reference.md'
        if git status --porcelain $apidoc_file_path | grep '^ M'; then
          echo "The API documentation doesn't reflect the current API. Please run make apidoc."
          exit 1
        fi

  crd:
    name: Verify CRD is up to date
    runs-on: ubuntu-20.04
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Run make manifests
        run: |
          make manifests

      - name: Check CRD manifests are up to date
        run: |
          crd_path='config/crd'
          if git status --porcelain $crd_path | grep '^ M'; then
            echo "The CRD manifests do not reflect the current API. Please run make manifests."
            exit 1
          fi

  buildx:
    name: Build containers
    runs-on: ubuntu-20.04
    outputs:
      image: ${{ steps.image-meta.outputs.image }}
    steps:
      -
        name: Checkout
        uses: actions/checkout@v2
      -
        name: Build meta
        id: build-meta
        run: |
          # By default, set the "testing" target repository on Quay.io
          # (every built container is pushed there)
          images='quay.io/enterprisedb/cloud-native-postgresql-testing'
          tags=''
          labels=''
          # In case we have a tag, add the main target repository
          if [ "${GITHUB_REF#refs/tags/}" != "${GITHUB_REF}" ]
          then
            images="${images},quay.io/enterprisedb/cloud-native-postgresql"
          fi
          # In case of commit on the "main" branch or tag, set the "latest"
          # label to the container image on the target repositories.
          # Otherwise set expiration to 7 days.
          if [ "${GITHUB_REF#refs/heads/}" == main ] || [ "${GITHUB_REF#refs/tags/}" != "${GITHUB_REF}" ]
          then
            tags='latest'
          else
            labels='quay.expires-after=7d'
          fi
          echo "::set-output name=images::${images}"
          echo "::set-output name=tags::${tags}"
          echo "::set-output name=labels::${labels}"
      -
        name: Docker meta
        id: docker-meta
        uses: crazy-max/ghaction-docker-meta@v1
        with:
          images: ${{ steps.build-meta.outputs.images }}
          tag-custom: ${{ steps.build-meta.outputs.tags }}
          tag-semver: |
            {{version}}
      -
        name: Set up QEMU
        uses: docker/setup-qemu-action@v1
      -
        name: Set up Docker Buildx
        id: buildx
        uses: docker/setup-buildx-action@v1
      -
        name: Login to quay.io
        uses: docker/login-action@v1
        with:
          registry: quay.io/enterprisedb
          username: ${{ secrets.QUAY_USERNAME }}
          password: ${{ secrets.QUAY_TOKEN }}
      -
        name: Build and push
        uses: docker/build-push-action@v2
        with:
          # Available architecture on UBI8 are: linux/amd64, linux/arm64, linux/ppc64le
          platforms: linux/amd64
          push: true
          tags: ${{ steps.docker-meta.outputs.tags }}
          labels: ${{ steps.build-meta.outputs.labels }}
      -
        name: Image Meta
        id: image-meta
        env:
          TAGS: ${{ steps.docker-meta.outputs.tags }}
        run: |
          # If there is more than one tag, take the first one
          # TAGS could be separated by newlines or commas
          image=$(sed -n '1{s/,.*//; p}' <<< "$TAGS")
          echo "::set-output name=image::${image}"
          mkdir -p path/to/artifact
          echo $image > path/to/artifact/image.txt
      -
        name: Save image name as artifact
        uses: actions/upload-artifact@v2
        with:
          name: build-image
          path: path/to/artifact

  trigger-ocp:
    name: Trigger OCP bundle
    needs:
      - golangci
      - shellcheck
      - tests
      - apidoc
      - crd
      - buildx
    runs-on: ubuntu-20.04
    steps:
      - name: Repository Dispatch
        uses: peter-evans/repository-dispatch@v1
        with:
          token: ${{ secrets.REPO_GHA_PAT }}
          repository: enterprisedb/cloud-native-postgresql-ocp-certified
          event-type: cnp-trigger
          client-payload: '{"upstream_commit": "${{ github.sha }}"}'
